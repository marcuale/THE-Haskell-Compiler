-- this file utilizes most of the syntaxes that are covered
-- the only ones not used are the various infix levels but 
-- most of those are still undefined

data List a = Empty | Node a (List a);
data Maybe a = Just a | Nothing;

(:) :: a -> List a -> List a;
(:) = Node; -- oh god i hope we can make this work please oh god

square :: Int -> Int;
square x = mult x x;

three :: Int;
three = (1 + 1) + 1;

main :: Int;
main = (square (head (2 : Empty))) + (len (2 : Empty));

len :: List a -> Int;
len l = case l of {
    Empty -> 0;
    Node _ ls -> add 1 (len ls);
};

head :: List a -> Maybe a;
head a = case a of {
    Empty -> Nothing;
    Node a _ -> Just a;
};

