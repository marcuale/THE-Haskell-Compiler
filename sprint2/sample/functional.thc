data List a = Empty | Node a (List a);

(:) :: a -> List a -> List a;
(:) = Node; -- oh god i hope we can make this work please oh god

add :: Int -> Int -> Int;
add x y = x + y;

add1 :: Int -> Int;
add1 = add 1;

main :: Int;
main = fold add 0 (map add1 (Node 3 (Node 4 Empty)));

head :: List a -> a;
head a = case a of {
    Node a _ -> a;
};

second :: List a -> a;
second a = case a of {
    Node a l -> head l;
};

map :: (a -> b) -> List a -> List b;
map f l = case l of {
    Empty -> Empty;
    Node a l -> Node (f a) (map f l);
};

sum :: List Int -> Int;
sum l = case l of {
    Empty -> 0;
    Node n ls -> n + (sum ls);
};

fold :: (a->b->b) -> b -> List a -> b;
fold f s l = case l of {
    Empty -> s;
    Node a ls -> f a (fold f s ls);
};
